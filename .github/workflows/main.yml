on:
 push:
  branches:
   - main
 
name: Push the Docker image to AWS ECR Repo

jobs:
 Build:
  name: Build
  runs-on: ubuntu-latest
  permissions:
   id-token: write
   contents: read
   
  steps:
   - name: Checkout
     uses: actions/checkout@v2
     
   - name: Configure AWS Credentials Action for GitHub Actions
     uses: aws-actions/configure-aws-credentials@v4.0.2
     with:
      role-to-assume: ${{ secrets.IAM_GHA_ROLE }}
      role-session-name: GitHub_to_AWS_via_FederatedOIDC
      aws-region: us-east-1

   - name: Setup Terraform with specified version on the runner
     uses: hashicorp/setup-terraform@v2
     with:
      terraform_version: 1.9.0
    
   - name: Terraform init
     id: init
     env:
      BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
     run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

   - name: Terraform plan
     id: plan
     if: github.event_name == 'push'
     run: terraform plan -no-color -input=false
     continue-on-error: true

   - name: Terraform Plan Status
     if: steps.plan.outcome == 'failure'
     run: exit 1
 
   - name: Terraform Apply
     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
     run: terraform apply -auto-approve -input=false
      
   - name: Login to Amazon ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v1

   - name: Build, tag, and push the image to Amazon ECR
     
     id: build-image
     env:
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      IMAGE_TAG: latest
     run: |
      docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.dockerfile .
      docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      aws lambda update-function-code --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} --image-uri ${{ secrets.IMAGE_URI }}
